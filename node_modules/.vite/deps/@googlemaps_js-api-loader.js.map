{
  "version": 3,
  "sources": ["../../@googlemaps/js-api-loader/src/setScriptSrc.ts", "../../@googlemaps/js-api-loader/src/bootstrap.js", "../../@googlemaps/js-api-loader/src/messages.ts", "../../@googlemaps/js-api-loader/src/deprecated.ts", "../../@googlemaps/js-api-loader/src/index.ts"],
  "sourcesContent": ["/*\r\n * Copyright 2025 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nexport function setScriptSrc(script: HTMLScriptElement, src: string) {\r\n  script.src = src;\r\n}\r\n", "/*\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// THIS FILE IS AUTOGENERATED! DO NOT EDIT!\n\n// This is a less minified version of the \"Dynamic Library Import\" (with a few small differences to enable packaging):\n// https://developers.google.com/maps/documentation/javascript/load-maps-js-api#dynamic-library-import\n\n// @ts-nocheck\n\nimport {setScriptSrc} from './setScriptSrc.js';\n\nexport const bootstrap = bootstrapParams => {\n  var bootstrapPromise;\n  var script;\n  var bootstrapParamsKey;\n  var PRODUCT_NAME = \"The Google Maps JavaScript API\";\n  var GOOGLE = \"google\";\n  var IMPORT_API_NAME = \"importLibrary\";\n  var PENDING_BOOTSTRAP_KEY = \"__ib__\";\n  var doc = document;\n  var global_ = window;\n  var google_ = global_[GOOGLE] || (global_[GOOGLE] = {});\n  var namespace = google_.maps || (google_.maps = {});\n  var libraries = new Set();\n  var searchParams = new URLSearchParams();\n  var triggerBootstrap = () => bootstrapPromise || (bootstrapPromise = new Promise(async(resolve, reject) => {\n    await (script = doc.createElement(\"script\"));\n    searchParams.set(\"libraries\", [...libraries] + \"\");\n    for (bootstrapParamsKey in bootstrapParams) {\n      searchParams.set(bootstrapParamsKey.replace(/[A-Z]/g, g => \"_\" + g[0].toLowerCase()), bootstrapParams[bootstrapParamsKey]);\n    }\n    searchParams.set(\"callback\", GOOGLE + \".maps.\" + PENDING_BOOTSTRAP_KEY);\n    setScriptSrc(script, \"https://maps.googleapis.com/maps/api/js?\" + searchParams);\n    namespace[PENDING_BOOTSTRAP_KEY] = resolve;\n    script.onerror = () => bootstrapPromise = reject(Error(PRODUCT_NAME + \" could not load.\"));\n    script.nonce = doc.querySelector(\"script[nonce]\")?.nonce || \"\";\n    doc.head.append(script);\n  }));\n  namespace[IMPORT_API_NAME] ? console.warn(PRODUCT_NAME + \" only loads once. Ignoring:\", bootstrapParams) : namespace[IMPORT_API_NAME] = (libraryName, ...args) => libraries.add(libraryName) && triggerBootstrap().then(() => namespace[IMPORT_API_NAME](libraryName, ...args));\n};\n", "/*\r\n * Copyright 2025 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport { APIOptions } from \"./index.js\";\r\n\r\nexport const MSG_DEPRECATED_LOADER =\r\n  \"The Loader class is no longer available in this version.\" +\r\n  \"\\nPlease use the new functional API: setOptions() and importLibrary().\" +\r\n  \"\\nFor more information, see the updated documentation at: \" +\r\n  \"https://github.com/googlemaps/js-api-loader/blob/main/README.md\";\r\n\r\nexport const MSG_REPEATED_SET_OPTIONS = (options: APIOptions) =>\r\n  `The setOptions() function should only be called once. The options passed ` +\r\n  `to the additional call (${JSON.stringify(options)}) will be ignored.`;\r\n\r\nexport const MSG_IMPORT_LIBRARY_EXISTS = (options: APIOptions) =>\r\n  `The google.maps.importLibrary() function is already defined, and ` +\r\n  `@googlemaps/js-api-loader will use the existing function instead of ` +\r\n  `overwriting it. The options passed to setOptions ` +\r\n  `(${JSON.stringify(options)}) will be ignored.`;\r\n\r\nexport const MSG_SET_OPTIONS_NOT_CALLED =\r\n  \"No options were set before calling importLibrary. Make sure to configure \" +\r\n  \"the loader using setOptions().\";\r\n\r\nexport const MSG_SCRIPT_ELEMENT_EXISTS =\r\n  \"There already is a script loading the Google Maps JavaScript \" +\r\n  \"API, and no google.maps.importLibrary function is defined. \" +\r\n  \"@googlemaps/js-api-loader will proceed to bootstrap the API \" +\r\n  \"with the specified options, but the existing script might cause \" +\r\n  \"problems using the API. Make sure to remove the script \" +\r\n  \"loading the API.\";\r\n\r\n// The __DEV__ global variable is set by rollup during the build process.\r\ndeclare const __DEV__: boolean;\r\n\r\nexport const logError = (message: string) => {\r\n  console.error(`[@googlemaps/js-api-loader] ${message}`);\r\n};\r\n\r\nexport const logDevWarning = __DEV__\r\n  ? (message: string) => {\r\n      console.warn(`[@googlemaps/js-api-loader] ${message}`);\r\n    }\r\n  : () => {};\r\n\r\nexport const logDevNotice = __DEV__\r\n  ? (message: string) => {\r\n      console.info(`[@googlemaps/js-api-loader] ${message}`);\r\n    }\r\n  : () => {};\r\n", "/*\r\n * Copyright 2025 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars */\r\n\r\nimport { MSG_DEPRECATED_LOADER } from \"./messages.js\";\r\n\r\n/**\r\n * @deprecated Use the new functional API: `setOptions()` and `importLibrary()`.\r\n * See the migration guide for more details: MIGRATION.md\r\n */\r\nexport class Loader {\r\n  constructor(...args: any[]) {\r\n    throw new Error(`[@googlemaps/js-api-loader]: ${MSG_DEPRECATED_LOADER}`);\r\n  }\r\n}\r\n", "/*\r\n * Copyright 2025 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { bootstrap } from \"./bootstrap.js\";\r\n\r\nimport {\r\n  logDevNotice,\r\n  logDevWarning,\r\n  MSG_IMPORT_LIBRARY_EXISTS,\r\n  MSG_SCRIPT_ELEMENT_EXISTS,\r\n  MSG_REPEATED_SET_OPTIONS,\r\n  MSG_SET_OPTIONS_NOT_CALLED,\r\n} from \"./messages.js\";\r\n\r\nexport type APIOptions = {\r\n  key?: string;\r\n  v?: string;\r\n  language?: string;\r\n  region?: string;\r\n  libraries?: string[];\r\n  authReferrerPolicy?: string;\r\n  mapIds?: string[];\r\n  channel?: string;\r\n  solutionChannel?: string;\r\n};\r\n\r\n// FIXME: remove the second importLibrary signature and ApiLibraryMap interface\r\n//   once proper typings are implemented in @types/google.maps\r\n//   (https://issuetracker.google.com/issues/423116767)\r\n\r\ninterface APILibraryMap {\r\n  core: google.maps.CoreLibrary;\r\n  drawing: google.maps.DrawingLibrary;\r\n  elevation: google.maps.ElevationLibrary;\r\n  geocoding: google.maps.GeocodingLibrary;\r\n  geometry: google.maps.GeometryLibrary;\r\n  journeySharing: google.maps.JourneySharingLibrary;\r\n  maps: google.maps.MapsLibrary;\r\n  maps3d: google.maps.Maps3DLibrary;\r\n  marker: google.maps.MarkerLibrary;\r\n  places: google.maps.PlacesLibrary;\r\n  routes: google.maps.RoutesLibrary;\r\n  streetView: google.maps.StreetViewLibrary;\r\n  visualization: google.maps.VisualizationLibrary;\r\n}\r\n\r\ntype APILibraryName = keyof APILibraryMap;\r\n\r\n// The __DEV__ global variable is set by rollup during the build process.\r\ndeclare const __DEV__: boolean;\r\n\r\nlet setOptionsWasCalled_ = false;\r\n\r\n/**\r\n * Sets the options for the Maps JavaScript API.\r\n *\r\n * Has to be called before any library is loaded.\r\n *\r\n * See https://developers.google.com/maps/documentation/javascript/load-maps-js-api#required_parameters\r\n * for the full documentation of available options.\r\n *\r\n * @param options The options to set.\r\n */\r\nexport function setOptions(options: APIOptions) {\r\n  if (setOptionsWasCalled_) {\r\n    logDevWarning(MSG_REPEATED_SET_OPTIONS(options));\r\n\r\n    return;\r\n  }\r\n\r\n  installImportLibrary_(options);\r\n  setOptionsWasCalled_ = true;\r\n}\r\n\r\n/**\r\n * Imports the specified library from the Maps JavaScript API.\r\n *\r\n * The first call to this function will start actually loading the Maps\r\n * JavaScript API.\r\n *\r\n * @param libraryName The name of the library to load.\r\n * @returns A promise that resolves with the loaded library. In case of an\r\n *   error (due to poor network conditions, browser extensions, etc.), the\r\n *   returned promise is rejected with an error.\r\n */\r\nexport async function importLibrary<TLibraryName extends APILibraryName>(\r\n  libraryName: TLibraryName\r\n): Promise<APILibraryMap[TLibraryName]>;\r\n\r\nexport async function importLibrary(\r\n  ...parameters: Parameters<typeof google.maps.importLibrary>\r\n): ReturnType<typeof google.maps.importLibrary>;\r\n\r\nexport async function importLibrary(libraryName: string): Promise<unknown> {\r\n  if (!setOptionsWasCalled_) {\r\n    logDevWarning(MSG_SET_OPTIONS_NOT_CALLED);\r\n  }\r\n\r\n  if (!window?.google?.maps?.importLibrary) {\r\n    throw new Error(\"google.maps.importLibrary is not installed.\");\r\n  }\r\n\r\n  return (await google.maps.importLibrary(\r\n    libraryName\r\n  )) as APILibraryMap[keyof APILibraryMap];\r\n}\r\n\r\n/**\r\n * The installImportLibrary_ function makes sure that a usable version of the\r\n * `google.maps.importLibrary` function exists.\r\n */\r\nfunction installImportLibrary_(options: APIOptions) {\r\n  const importLibraryExists = Boolean(window.google?.maps?.importLibrary);\r\n  if (importLibraryExists) {\r\n    logDevNotice(MSG_IMPORT_LIBRARY_EXISTS(options));\r\n  } else if (__DEV__) {\r\n    const scriptEl = document.querySelector(\r\n      'script[src*=\"maps.googleapis.com/maps/api/js\"]'\r\n    );\r\n\r\n    if (scriptEl) {\r\n      logDevWarning(MSG_SCRIPT_ELEMENT_EXISTS);\r\n    }\r\n  }\r\n\r\n  // If the google.maps.importLibrary function already exists, bootstrap()\r\n  // won't do anything, so we won't call it\r\n  if (!importLibraryExists) {\r\n    bootstrap(options);\r\n  }\r\n}\r\n\r\n// export the deprecated (and non-functional) Loader class to trigger a strong\r\n// error-message for users migrating to the new version\r\nexport * from \"./deprecated.js\";\r\n"],
  "mappings": "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",
  "names": []
}
